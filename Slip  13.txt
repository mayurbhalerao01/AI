Q.1Write a Python program to implement Mini-Max Algorithm. [ 10 Marks ].


def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)
def evaluate(board):
    for row in board:
        if all(cell == 'X' for cell in row):
            return 10
        elif all(cell == 'O' for cell in row):
            return -10
    for col in range(3):
        if all(board[row][col] == 'X' for row in range(3)):
            return 10
        elif all(board[row][col] == 'O' for row in range(3)):
            return -10
    if all(board[i][i] == 'X' for i in range(3)):
        return 10
    elif all(board[i][i] == 'O' for i in range(3)):
        return -10
    if all(board[i][2 - i] == 'X' for i in range(3)):
        return 10
    elif all(board[i][2 - i] == 'O' for i in range(3)):
        return -10
    return 0
def is_moves_left(board):
    return any(cell == ' ' for row in board for cell in row)
def mini_max(board, depth, is_maximizing):
    score = evaluate(board)
    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if not is_moves_left(board):
        return 0
    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X




Q.2) Write a Python program to simulate 8-Queens problem.

def is_safe(board, row, col):
    if any(board[row]):
        return False
    if any(board[i][col] for i in range(len(board))):
        return False
    if any(board[i][j] for i, j in zip(range(row, -1, -1), range(col, -1, -1))):
        return False
    if any(board[i][j] for i, j in zip(range(row, -1, -1), range(col, len(board)))):
        return False
    return True
def solve_n_queens(board, row):
    if row == len(board):
        return True  
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve_n_queens(board, row + 1):
                return True
            board[row][col] = 0  s
    return False
def print_board(board):
    for row in board:
        print(' '.join('Q' if cell else '.' for cell in row))
if __name__ == "__main__":
    board_size = 8
    chessboard = [[0] * board_size for _ in range(board_size)]
    if solve_n_queens(chessboard, 0):
        print("Solution found:")
        print_board(chessboard)
    else:
        print("No solution found.")



