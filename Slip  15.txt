Q.1)Write a Program to Implement Monkey Banana Problem using Python.

class MonkeyBananaProblem:
    def __init__(self, grid):
        self.grid = grid
        self.monkey_pos = self.find_char('M')
        self.banana_pos = self.find_char('B')
    def find_char(self, char):
        for i, row in enumerate(self.grid):
            for j, cell in enumerate(row):
                if cell == char:
                    return (i, j)
        return None
    def move(self, direction):
        moves = {'UP': (-1, 0), 'DOWN': (1, 0), 'LEFT': (0, -1), 'RIGHT': (0, 1)}
        if direction in moves:
            move = moves[direction]
            new_pos = (self.monkey_pos[0] + move[0], self.monkey_pos[1] + move[1])
            if 0 <= new_pos[0] < len(self.grid) and 0 <= new_pos[1] < len(self.grid[0]):
                self.monkey_pos = new_pos
                if self.monkey_pos == self.banana_pos:
                    print("Monkey reached the banana!")
                    return True
                else:
                    print(f"Monkey moved {direction}")
            else:
                print("Invalid move! Monkey hit the wall.")
        else:
            print("Invalid move! Please use UP, DOWN, LEFT, or RIGHT.")
        return False
monkey_problem = MonkeyBananaProblem(grid_example)
while not monkey_problem.move(input("Enter move direction (UP, DOWN, LEFT, RIGHT): ").upper()):
    pass


Q.2) Write a program to implement Iterative Deepening DFS algorithm [ Goal Node =G].

class Node:
    def __init__(self, name, children=None):
        self.name = name
        self.children = children if children else []
def iterative_deepening_dfs(root, goal):
    depth = 0
    while True:
        result = depth_limited_dfs(root, goal, depth)
        if result is not None:
            return result
        depth += 1
def depth_limited_dfs(node, goal, depth):
    return recursive_dls(node, goal, depth)
def recursive_dls(node, goal, depth):
    if depth == 0 and node.name == goal:
        return node.name
    elif depth > 0:
        for child in node.children:
            result = recursive_dls(child, goal, depth - 1)
            if result is not None:
                return result
    return None
root = Node('A', [Node('B', [Node('D'), Node('E')]), Node('C', [Node('F', [Node('G')])])])
goal_node = 'G'
result = iterative_deepening_dfs(root, goal_node)
if result is not None:
    print(f"Goal node '{goal_node}' found.")
else:
    print(f"Goal node '{goal_node}' not found.")
