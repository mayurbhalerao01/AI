Q.1) Write a Program to Implement Tower of Hanoi using Python [ 10 Marks ].

def tower_of_hanoi(n, source, target, auxiliary):
    if n == 1:
        print(f"Move disk 1 from {source} to {target}")
        return
    tower_of_hanoi(n - 1, source, auxiliary, target)
    print(f"Move disk {n} from {source} to {target}")
    tower_of_hanoi(n - 1, auxiliary, target, source)
number_of_disks = int(input("Enter the number of disks: "))
tower_of_hanoi(number_of_disks, 'A', 'C', 'B')


Q.2) Write a Python program to solve tic-tac-toe problem.

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)
def check_winner(board, player):
    for i in range(3):
        if all(cell == player for cell in board[i]) or all(row[i] == player for row in board):
            return True
   if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False
def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)
def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 0
    while True:
        print_board(board)
        row = int(input(f"Player {players[current_player]}, enter the row (0, 1, or 2): "))
        col = int(input(f"Player {players[current_player]}, enter the column (0, 1, or 2): "))
        if board[row][col] == ' ':
            board[row][col] = players[current_player]
            if check_winner(board, players[current_player]):
                print_board(board)
                print(f"Player {players[current_player]} wins!")
                break
            if is_board_full(board):
                print_board(board)
                print("It's a draw!")
                break
            current_player = 1 - current_player  # Switch player
        else:
            print("Cell already taken. Try again.")
if __name__ == "__main__":
    tic_tac_toe()
